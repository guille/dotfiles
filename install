#!/usr/bin/env bash

set -e

# flags
SELECT=0
while (($#)); do
  case "$1" in
    -s|--select) SELECT=1 ;;
    --) shift; break ;;
    *) echo "unknown option: $1" >&2; exit 2 ;;
  esac
  shift
done

# Exported so the module install scripts have a ref to the base
export SCRIPT_BASE_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"

source "$SCRIPT_BASE_DIR/common" || exit 1

populate_os_zvars() {
	os="$(uname -s)"

	case "$os" in
	Linux*)
		echo "export DOTFILES_OS=Linux" > "$SCRIPT_BASE_DIR/zsh/zvars"
		;;
	Darwin*)
		echo "export DOTFILES_OS=OSX" > "$SCRIPT_BASE_DIR/zsh/zvars"
		;;
	*)
		errorprint "Unsupported OS: $os"
		exit 1
		;;
	esac
}

populate_profile_zvars() {
	choices=("personal" "work" "hybrid")

	if command_exists fzf; then
		profile=$(printf "%s\n" "${choices[@]}" | fzf --prompt="Select profile: ")
	else
		echo "Select profile:"
		select opt in "${choices[@]}"; do
			if [[ -n "$opt" ]]; then
				profile="$opt"
				break
			fi
		done
	fi

	# If user aborted, bail
	if [[ -z "${profile:-}" ]]; then
		errorprint "No profile selected."
		exit 1
	fi

	echo "export DOTFILES_PROFILE=$profile" >> "$SCRIPT_BASE_DIR/zsh/zvars"
}

populate_os_zvars
populate_profile_zvars

source "$SCRIPT_BASE_DIR/zsh/zvars"
infoprint "[main] configured & loaded zvars"


modules_to_install=(
	system # always first!
	zsh
	mise
	ruby
	mpd
	git
	sublime
	ghostty
	sway
	waybar
	mpv
	thunar
	nvim
	rofi
	dunst
	tailscale
	dotnet
	mybin
	bat
)

# interactively pick modules
if (( SELECT )); then
	if ! command_exists fzf; then
		errorprint "error: --select/-s requires fzf"
		exit 1
	fi
	choices=$(printf "%s\n" "${modules_to_install[@]}" | sort -r | fzf -m --bind enter:accept-non-empty --prompt="Select modules to install > ")
	modules_to_install=( $(echo "$choices") )
fi

for module in "${modules_to_install[@]}"; do
	infoprint "[$module] installing..."
	bash "$SCRIPT_BASE_DIR/$module/__install"
	infoprint "[main] $module done"
done

infoprint "[main] done"

#!/usr/bin/env bash

# sets it for all
# set -e

# Helper vars
GREEN='\033[0;32m'
RED='\033[0;31m'
NO_COLOR='\033[0m'

# Helper functions
command_exists() {
	type "$1" &> /dev/null ;
}
infoprint() {
	echo -e "${GREEN}${1}${NO_COLOR}"
}
errorprint() {
	echo -e "${RED}${1}${NO_COLOR}" >&2
}
is_work() {
	[[ "$DOTFILES_PROFILE" == "work" ]]
}
is_personal() {
	[[ "$DOTFILES_PROFILE" == "personal" ]]
}
is_work_or_hybrid() {
	[[ "$DOTFILES_PROFILE" == "work" || "$DOTFILES_PROFILE" == "hybrid" ]]
}
is_personal_or_hybrid() {
	[[ "$DOTFILES_PROFILE" == "personal" || "$DOTFILES_PROFILE" == "hybrid" ]]
}
prepare_profiled_config() {
	if [ -z "$module_name" ]; then
		errorprint "error: \$module_name not set!"
		return 1
    fi

	local filename="$1"
	local target="${SCRIPT_BASE_DIR}/${module_name}/${filename}"

	# reset from base
	cp "${target}.base" "$target"

	if is_personal_or_hybrid; then
	    cat "${target}.personal" >> "$target"
	fi

	if is_work_or_hybrid; then
	    cat "${target}.work" >> "$target"
	fi
}
# Adds a line to the global gitignore if it doesn't exist already
gitignore() {
	infoprint "[$module_name] adding $1 to global gitignore"
	touch ~/.gitignore
	grep -qxF "$1" ~/.gitignore || echo "$1" >> ~/.gitignore
}
